load(file=paste0("../output/feature_", "zip", "_", "test", ".RData"))
load(file="../output/fit_train.RData")
tm_test <- system.time(pred_test <- test(fit_train, dat_test))
save(pred_test, file="../output/pred_test.RData")
}
cat("Time for constructing training features=", tm_feature_train[1], "s \n")
cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
cat("Time for training model=", tm_train[1], "s \n")
cat("Time for making prediction=", tm_test[1], "s \n")
getwd()
# Load the libraries
packages.used <- c("EBImage","gbm","caret","nnet","xgboost","xgboost",
"haven","tidyverse","mlr","plyr","ggplot2","randomForest",
"adabag","neuralnet","grDevices","kernlab","tree")
#if(!require("EBImage")){
#  source("https://bioconductor.org/biocLite.R")
#  biocLite("EBImage")
#}
# Check packages
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install needed packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library("EBImage")
library("gbm")
library("kernlab")
library("tree")
library("caret")
library("nnet")
library("xgboost")
library("haven")
library("tidyverse")
library("mlr")
library("plyr")
library("ggplot2")
library("randomForest")
library("adabag")
library("neuralnet")
library("grDevices")
getwd()
setwd("/Users/zx.xue/Documents/GitHub/Spring2018-Project3-spring2018-project3-group3")
experiment_dir <- "../data/"
img_train_dir <- paste(experiment_dir, "train/", sep="")
img_test_dir <- paste(experiment_dir, "test/", sep="")
run.feature.train = TRUE
run.test = TRUE
run.feature.test = TRUE
run.xgboost = TRUE
run.adaboost = FALSE
run.tree = FALSE
run.gbm = FALSE
run.lg = FALSE
run.nnt = FALSE
run.rf = FALSE
run.svm = FALSE
source("../lib/SelectFeature.R")
# tm_feature_train <- NA
# if(run.feature.train){
#   tm_feature_train <- system.time(dat_train <- SelectFeature(SIFTname, SubGroup))
# }
# cat("Time for constructing training features=", tm_feature_train[1], "s \n")
#tm_feature_test <- NA
#if(run.feature.test){
#  tm_feature_test <- system.time(dat_test <-SelectFeature())
#}
# Running time
#cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
#save(dat_train, file="./output/feature_train.RData")
#save(dat_test, file="./output/feature_test.RData")
SelectFeature()
SelectFeature()
source("../lib/SelectFeature.R")
SelectFeature()
source("../lib/SelectFeature.R")
SelectFeature()
source("../lib/SelectFeature.R")
# tm_feature_train <- NA
# if(run.feature.train){
#   tm_feature_train <- system.time(dat_train <- SelectFeature(SIFTname, SubGroup))
# }
# cat("Time for constructing training features=", tm_feature_train[1], "s \n")
#tm_feature_test <- NA
#if(run.feature.test){
#  tm_feature_test <- system.time(dat_test <-SelectFeature())
#}
# Running time
#cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
#save(dat_train, file="./output/feature_train.RData")
#save(dat_test, file="./output/feature_test.RData")
SelectFeature()
source("../lib/SelectFeature.R")
# tm_feature_train <- NA
# if(run.feature.train){
#   tm_feature_train <- system.time(dat_train <- SelectFeature(SIFTname, SubGroup))
# }
# cat("Time for constructing training features=", tm_feature_train[1], "s \n")
#tm_feature_test <- NA
#if(run.feature.test){
#  tm_feature_test <- system.time(dat_test <-SelectFeature())
#}
# Running time
#cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
#save(dat_train, file="./output/feature_train.RData")
#save(dat_test, file="./output/feature_test.RData")
SelectFeature()
source("../lib/SelectFeature.R")
# tm_feature_train <- NA
# if(run.feature.train){
#   tm_feature_train <- system.time(dat_train <- SelectFeature(SIFTname, SubGroup))
# }
# cat("Time for constructing training features=", tm_feature_train[1], "s \n")
#tm_feature_test <- NA
#if(run.feature.test){
#  tm_feature_test <- system.time(dat_test <-SelectFeature())
#}
# Running time
#cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
#save(dat_train, file="./output/feature_train.RData")
#save(dat_test, file="./output/feature_test.RData")
FeatureData <- SelectFeature(N = 50)
View(FeatureData)
source("../lib/SelectFeature.R")
# tm_feature_train <- NA
# if(run.feature.train){
#   tm_feature_train <- system.time(dat_train <- SelectFeature(SIFTname, SubGroup))
# }
# cat("Time for constructing training features=", tm_feature_train[1], "s \n")
#tm_feature_test <- NA
#if(run.feature.test){
#  tm_feature_test <- system.time(dat_test <-SelectFeature())
#}
# Running time
#cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
#save(dat_train, file="./output/feature_train.RData")
#save(dat_test, file="./output/feature_test.RData")
TotalImage <- 50
lottery <- sample(1:5, TotalImage, replace = TRUE)
FeatureData <- SelectFeature(N = TotalImage)
class_train <- c(rep(1,1000), rep(2, 1000), rep(3, 1000))
class_train <- tr_class[1:TotalImage]
class_train <- class_train[1:TotalImage]
dat_train <- cbind(class_train, FeatureData[which(lottery != 1),])
dat_train <- cbind(class_train[which(lottery != 1)], FeatureData[which(lottery != 1),])
colnames(dat_train)[1] <- "class"
source("../lib/train.R")
source("../lib/test.R")
gbm_train <-  train_GBM(dat_train)
xgboost_train<- train_xgboost(dat_train)
tree_train <- train_tree(dat_train)
source("../lib/train.R")
source("../lib/test.R")
adaboost_train <- train_adaboosting(dat_train)
dat_train_xgb <- as.matrix(data_train)
dat_train_xgb <- as.matrix(dat_train)
xgboost_train<- train_xgboost(dat_train_xgb)
dat_train <- read.csv("tmp.csv")
dat_train <- dat_train[,-1]
class_train <- c(rep(1,1000), rep(2, 1000), rep(3, 1000))
lottery <- sample(1:5, 3000, replace = TRUE)
dat_train <- cbind(class_train[which(lottery != 1)], FeatureData[which(lottery != 1),])
colnames(dat_train)[1] <- "class"
dat_test <-  FeatureData[which(lottery == 1),]
dat_train_xgb <- as.matrix(dat_train)
xgboost_train<- train_xgboost(dat_train_xgb)
xgboost_test(xgboost_train, dat_test)
xgboost_test(xgboost_train$fit, dat_test)
xgboost_test(xgboost_train$fit, as.matrix(dat_test))
source("../lib/test.R")
xgboost_test(xgboost_train$fit, as.matrix(dat_test))
dat_train_xgb <- as.matrix(dat_train)
xgboost_train<- train_xgboost(dat_train_xgb)
gbm_train <-  train_GBM(dat_train)
source("../lib/train.R")
source("../lib/test.R")
gbm_train <-  train_GBM(dat_train)
gbm_test(gbm_train$fit, dat_test)
lottery
mean(gbm_test(gbm_train$fit, dat_test),class_train[lottery == 1])
mean(gbm_test(gbm_train$fit, dat_test),class_train[which(lottery == 1)])
class_train[which(lottery == 1)]
mean(gbm_test(gbm_train$fit, dat_test)==class_train[which(lottery == 1)])
gbm_test(gbm_train$fit, dat_test)
gbm_train <-  train_GBM(dat_train)
source("../lib/train.R")
source("../lib/test.R")
gbm_train <-  train_GBM(dat_train)
source("../lib/train.R")
gbm_train <-  train_GBM(dat_train)
gbm_test(gbm_train$fit, dat_test)
tree_train <- train_tree(dat_train)
load(file="../lib/XgBoost/XgBoost.RData")
tm_xgboost_test <- system.time(xgboost.pred <- predict(fit_model, dat_test))
tm_xgboost_test <- system.time(xgboost.pred <- predict(model, dat_test))
tm_xgboost_test <- system.time(xgboost.pred <- predict(model, as.matrix(dat_test)))
tm_xgboost_test <- system.time(xgboost.pred <- predict(model, as.matrix(dat_test)) + 1)
xgboost.pred
run.xgboost = TRUE
run.adaboost = FALSE
run.tree = FALSE
run.gbm = TRUE
run.lg = FALSE
run.nnt = FALSE
run.rf = FALSE
run.svm = FALSE
source("../lib/SelectFeature.R")
# tm_feature_train <- NA
# if(run.feature.train){
#   tm_feature_train <- system.time(dat_train <- SelectFeature(SIFTname, SubGroup))
# }
# cat("Time for constructing training features=", tm_feature_train[1], "s \n")
#tm_feature_test <- NA
#if(run.feature.test){
#  tm_feature_test <- system.time(dat_test <-SelectFeature())
#}
# Running time
#cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
#save(dat_train, file="./output/feature_train.RData")
#save(dat_test, file="./output/feature_test.RData")
TotalImage <- 2100
lottery <- sample(1:5, TotalImage, replace = TRUE)
FeatureData <- SelectFeature(N = TotalImage)
class_train <- c(rep(1,1000), rep(2, 1000), rep(3, 1000))
class_train <- class_train[1:TotalImage]
dat_train <- cbind(class_train[which(lottery != 1)], FeatureData[which(lottery != 1),])
colnames(dat_train)[1] <- "class"
dat_test <-  FeatureData[which(lottery == 1),]
gbm_train <-  train_GBM(dat_train)
source("../lib/train.R")
source("../lib/test.R")
gbm_train <-  train_GBM(dat_train)
gbmPred <- gbm_test(gbm_train$fit, dat_test)
cat("Accuracy", mean(gbmPred == class_train[which(lottery == 1)]))
dat_train_xgb <- as.matrix(dat_train)
xgboost_train<- train_xgboost(dat_train_xgb)
xgbPred <- xgboost_test(xgboost_train$fit, as.matrix(dat_test))
xgboost_train
xgboost_train <- train_xgboost(dat_train_xgb)
save(gbm_train$fit, "GBM.RData");
save(gbm_train, "GBM.RData");
xgbPred <- xgboost_test(xgboost_train$fit, as.matrix(dat_test))
cat("Accuracy", mean(xgbPred == class_train[which(lottery == 1)]))
load(file="../lib/XgBoost/XgBoost.RData")
tm_xgboost_test <- system.time(xgboost.pred <- predict(model, as.matrix(dat_test)) + 1)
save(xgboost.pred, file="../output/xgboost.pred.RData")
cat("Time for testing model=", tm_xgboost_test[1], "s \n")
cat("Accuracy", mean(xgboost.pred == class_train[which(lottery == 1)]))
save(gbm_train, "GBM.RData");
gbm_train$fit
save(gbm_train$fit, "GBM.RData");
save(gbm_train$fit, file = "GBM.RData");
save(gbm_train, file = "GBM.RData");
load(file="../lib/GBM/GBM.RData")
tm_gbm_test <- system.time(gbm.pred <- predict(gbm_train$fit, dat_test))
save(gbm.pred, file="../output/gbm.pred.RData")
cat("Time for testing model=", tm_gbm_test[1], "s \n")
cat("Accuracy", mean(gbm.pred == class_train[which(lottery == 1)]))
source("../lib/SelectFeature.R")
# tm_feature_train <- NA
# if(run.feature.train){
#   tm_feature_train <- system.time(dat_train <- SelectFeature(SIFTname, SubGroup))
# }
# cat("Time for constructing training features=", tm_feature_train[1], "s \n")
#tm_feature_test <- NA
#if(run.feature.test){
#  tm_feature_test <- system.time(dat_test <-SelectFeature())
#}
# Running time
#cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
#save(dat_train, file="./output/feature_train.RData")
#save(dat_test, file="./output/feature_test.RData")
if (run.feature.RGB)
{
TotalImage <- 2100
lottery <- sample(1:5, TotalImage, replace = TRUE)
FeatureData <- SelectFeature(N = TotalImage)
class_train <- c(rep(1,1000), rep(2, 1000), rep(3, 1000))
class_train <- class_train[1:TotalImage]
dat_train <- cbind(class_train[which(lottery != 1)], FeatureData[which(lottery != 1),])
colnames(dat_train)[1] <- "class"
dat_test <-  FeatureData[which(lottery == 1),]
}
run.feature.train = TRUE
run.test = TRUE
run.feature.test = TRUE
run.feature.RGB <- FALSE
source("../lib/SelectFeature.R")
# tm_feature_train <- NA
# if(run.feature.train){
#   tm_feature_train <- system.time(dat_train <- SelectFeature(SIFTname, SubGroup))
# }
# cat("Time for constructing training features=", tm_feature_train[1], "s \n")
#tm_feature_test <- NA
#if(run.feature.test){
#  tm_feature_test <- system.time(dat_test <-SelectFeature())
#}
# Running time
#cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
#save(dat_train, file="./output/feature_train.RData")
#save(dat_test, file="./output/feature_test.RData")
if (run.feature.RGB)
{
TotalImage <- 2100
lottery <- sample(1:5, TotalImage, replace = TRUE)
FeatureData <- SelectFeature(N = TotalImage)
class_train <- c(rep(1,1000), rep(2, 1000), rep(3, 1000))
class_train <- class_train[1:TotalImage]
dat_train <- cbind(class_train[which(lottery != 1)], FeatureData[which(lottery != 1),])
colnames(dat_train)[1] <- "class"
dat_test <-  FeatureData[which(lottery == 1),]
}
else
source("../lib/SelectFeature.R")
# tm_feature_train <- NA
# if(run.feature.train){
#   tm_feature_train <- system.time(dat_train <- SelectFeature(SIFTname, SubGroup))
# }
# cat("Time for constructing training features=", tm_feature_train[1], "s \n")
#tm_feature_test <- NA
#if(run.feature.test){
#  tm_feature_test <- system.time(dat_test <-SelectFeature())
#}
# Running time
#cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
#save(dat_train, file="./output/feature_train.RData")
#save(dat_test, file="./output/feature_test.RData")
if (run.feature.RGB)
{
TotalImage <- 2100
lottery <- sample(1:5, TotalImage, replace = TRUE)
FeatureData <- SelectFeature(N = TotalImage)
class_train <- c(rep(1,1000), rep(2, 1000), rep(3, 1000))
class_train <- class_train[1:TotalImage]
dat_train <- cbind(class_train[which(lottery != 1)], FeatureData[which(lottery != 1),])
colnames(dat_train)[1] <- "class"
dat_test <-  FeatureData[which(lottery == 1),]
}
else
source("../lib/SelectFeature.R")
# tm_feature_train <- NA
# if(run.feature.train){
#   tm_feature_train <- system.time(dat_train <- SelectFeature(SIFTname, SubGroup))
# }
# cat("Time for constructing training features=", tm_feature_train[1], "s \n")
#tm_feature_test <- NA
#if(run.feature.test){
#  tm_feature_test <- system.time(dat_test <-SelectFeature())
#}
# Running time
#cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
#save(dat_train, file="./output/feature_train.RData")
#save(dat_test, file="./output/feature_test.RData")
if (run.feature.RGB)
{
TotalImage <- 2100
lottery <- sample(1:5, TotalImage, replace = TRUE)
FeatureData <- SelectFeature(N = TotalImage)
class_train <- c(rep(1,1000), rep(2, 1000), rep(3, 1000))
class_train <- class_train[1:TotalImage]
dat_train <- cbind(class_train[which(lottery != 1)], FeatureData[which(lottery != 1),])
colnames(dat_train)[1] <- "class"
dat_test <-  FeatureData[which(lottery == 1),]
}
if (!run.feature.RGB)
{
TotalImage <- 3000
lottery <- sample(1:5, TotalImage, replace = TRUE)
class_train <- c(rep(1,1000), rep(2, 1000), rep(3, 1000))
dat_train <- read.csv("SIFT_test.csv")
dat_train <- dat_train[,-1]
dat_train <- cbind(class_train[which(lottery != 1)], FeatureData[which(lottery != 1),])
colnames(dat_train)[1] <- "class"
dat_test <- FeatureData[which(lottery == 1),]
}
source("../lib/SelectFeature.R")
# tm_feature_train <- NA
# if(run.feature.train){
#   tm_feature_train <- system.time(dat_train <- SelectFeature(SIFTname, SubGroup))
# }
# cat("Time for constructing training features=", tm_feature_train[1], "s \n")
#tm_feature_test <- NA
#if(run.feature.test){
#  tm_feature_test <- system.time(dat_test <-SelectFeature())
#}
# Running time
#cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
#save(dat_train, file="./output/feature_train.RData")
#save(dat_test, file="./output/feature_test.RData")
if (run.feature.RGB)
{
TotalImage <- 2100
lottery <- sample(1:5, TotalImage, replace = TRUE)
FeatureData <- SelectFeature(N = TotalImage)
class_train <- c(rep(1,1000), rep(2, 1000), rep(3, 1000))
class_train <- class_train[1:TotalImage]
dat_train <- cbind(class_train[which(lottery != 1)], FeatureData[which(lottery != 1),])
colnames(dat_train)[1] <- "class"
dat_test <-  FeatureData[which(lottery == 1),]
}
if (!run.feature.RGB)
{
TotalImage <- 3000
lottery <- sample(1:5, TotalImage, replace = TRUE)
class_train <- c(rep(1,1000), rep(2, 1000), rep(3, 1000))
dat_train <- read.csv("../lib/SIFT_test.csv")
dat_train <- dat_train[,-1]
dat_train <- cbind(class_train[which(lottery != 1)], FeatureData[which(lottery != 1),])
colnames(dat_train)[1] <- "class"
dat_test <- FeatureData[which(lottery == 1),]
}
source("../lib/SelectFeature.R")
# tm_feature_train <- NA
# if(run.feature.train){
#   tm_feature_train <- system.time(dat_train <- SelectFeature(SIFTname, SubGroup))
# }
# cat("Time for constructing training features=", tm_feature_train[1], "s \n")
#tm_feature_test <- NA
#if(run.feature.test){
#  tm_feature_test <- system.time(dat_test <-SelectFeature())
#}
# Running time
#cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
#save(dat_train, file="./output/feature_train.RData")
#save(dat_test, file="./output/feature_test.RData")
if (run.feature.RGB)
{
TotalImage <- 2100
lottery <- sample(1:5, TotalImage, replace = TRUE)
FeatureData <- SelectFeature(N = TotalImage)
class_train <- c(rep(1,1000), rep(2, 1000), rep(3, 1000))
class_train <- class_train[1:TotalImage]
dat_train <- cbind(class_train[which(lottery != 1)], FeatureData[which(lottery != 1),])
colnames(dat_train)[1] <- "class"
dat_test <-  FeatureData[which(lottery == 1),]
}
if (!run.feature.RGB)
{
TotalImage <- 3000
lottery <- sample(1:5, TotalImage, replace = TRUE)
class_train <- c(rep(1,1000), rep(2, 1000), rep(3, 1000))
dat_train <- read.csv("../lib/SIFT_test.csv")
dat_train <- dat_train[,-1]
dat_train <- cbind(class_train[which(lottery != 1)], FeatureData[which(lottery != 1),])
colnames(dat_train)[1] <- "class"
dat_test <- FeatureData[which(lottery == 1),]
}
run.feature.train = TRUE
run.test = TRUE
run.feature.test = TRUE
run.feature.RGB <- FALSE
run.xgboost = FALSE
run.adaboost = FALSE
run.tree = FALSE
run.gbm = TRUE
run.lg = FALSE
run.nnt = FALSE
run.rf = FALSE
run.svm = FALSE
source("../lib/SelectFeature.R")
# tm_feature_train <- NA
# if(run.feature.train){
#   tm_feature_train <- system.time(dat_train <- SelectFeature(SIFTname, SubGroup))
# }
# cat("Time for constructing training features=", tm_feature_train[1], "s \n")
#tm_feature_test <- NA
#if(run.feature.test){
#  tm_feature_test <- system.time(dat_test <-SelectFeature())
#}
# Running time
#cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
#save(dat_train, file="./output/feature_train.RData")
#save(dat_test, file="./output/feature_test.RData")
if (run.feature.RGB)
{
TotalImage <- 2100
lottery <- sample(1:5, TotalImage, replace = TRUE)
FeatureData <- SelectFeature(N = TotalImage)
class_train <- c(rep(1,1000), rep(2, 1000), rep(3, 1000))
class_train <- class_train[1:TotalImage]
dat_train <- cbind(class_train[which(lottery != 1)], FeatureData[which(lottery != 1),])
colnames(dat_train)[1] <- "class"
dat_test <-  FeatureData[which(lottery == 1),]
}
if (!run.feature.RGB)
{
TotalImage <- 3000
lottery <- sample(1:5, TotalImage, replace = TRUE)
class_train <- c(rep(1,1000), rep(2, 1000), rep(3, 1000))
dat_train <- read.csv("../lib/SIFT_test.csv")
dat_train <- dat_train[,-1]
dat_train <- cbind(class_train[which(lottery != 1)], FeatureData[which(lottery != 1),])
colnames(dat_train)[1] <- "class"
dat_test <- FeatureData[which(lottery == 1),]
}
# Load the libraries
packages.used <- c("EBImage","gbm","caret","nnet","xgboost","xgboost",
"haven","tidyverse","mlr","plyr","ggplot2","randomForest",
"adabag","neuralnet","grDevices","kernlab","tree")
#if(!require("EBImage")){
#  source("https://bioconductor.org/biocLite.R")
#  biocLite("EBImage")
#}
# Check packages
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install needed packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
